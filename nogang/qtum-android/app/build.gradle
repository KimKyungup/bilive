buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates
        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.24.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://jitpack.io' }
    google()
}

android {
    signingConfigs {
        releaseConfig {
            keyAlias 'QTUM'
            keyPassword 'qtum-mobile'
            storeFile file('/Users/kirillvolkov/Documents/PixelPlex/Qtum/jks/qtum-test.jks')
            storePassword 'qtum-mobile'
        }
    }
    flavorDimensions 'default'
    lintOptions {
        disable 'MissingTranslation'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        // bitcoinj brings in a native library for x86_64, which seems to confuse the playstore upload - just strip the file
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
    }
    Properties buildProps
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        buildProps = getBuildProperties('local')
        applicationId buildProps['APPLICATION_ID']
        buildConfigField 'String', 'API_URL', buildProps['API_URL'].toString()
        buildConfigField 'Boolean', 'USE_MAIN_NET', buildProps['USE_MAIN_NET']
        versionCode buildProps['VERSION_CODE'].toInteger()
        versionName buildProps['VERSION_NAME'].toString()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {}
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile('com.squareup.retrofit2:converter-simplexml:2.0.0-beta3') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    compile 'com.android.support:appcompat-v7:26.1.0'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile 'org.assertj:assertj-core:2.8.0'
    compile 'com.android.support:support-v4:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.github.designsters:android-fork-bitcoinj:1.0.11'
    compile 'com.android.support:multidex:1.0.2'
    compile 'com.google.zxing:core:3.3.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.google.zxing:android-core:3.3.0'
    compile 'me.dm7.barcodescanner:zxing:1.8.4'
    compile 'io.reactivex:rxjava:1.2.2'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile('io.socket:socket.io-client:0.8.3') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'com.airbnb.android:lottie:2.0.0-beta3'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.andkulikov:transitionseverywhere:1.7.2'
    compile 'com.alimuzaffar.lib:pinentryedittext:1.3.1'
    compile 'com.baoyz.pullrefreshlayout:library:1.2.0'
    compile 'com.github.JakeWharton:ViewPagerIndicator:2.4.1'
    compile 'com.mikhaellopez:hfrecyclerview:1.0.0'
    compile 'com.google.firebase:firebase-core:11.4.2'
    compile 'com.google.firebase:firebase-messaging:11.4.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.beloo.widget:ChipsLayoutManager:0.3.7@aar'
    compile 'org.jsoup:jsoup:1.10.3'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
    compile 'com.google.android.gms:play-services-wearable:11.4.2'
}
apply plugin: 'com.google.gms.google-services'

def getBuildProperties(buildType) {
    def propertiesFile = file(buildType + '.properties')
    if (propertiesFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(propertiesFile))
        if (versionProps.containsKey('apiSecret') && versionProps.containsKey('apiKey')) {
            Properties fabricProps = new Properties()
            fabricProps.put('apiSecret', versionProps['apiSecret'])
            fabricProps.put('apiKey', versionProps['apiKey'])
            FileWriter fabricWriter = new FileWriter('app/fabric.properties')
            fabricProps.store(fabricWriter, 'Auto Generate')
            fabricWriter.close()
        }
        return versionProps
    } else {
        copy {
            from 'default.properties'
            into '.'
            rename { String fileName ->
                fileName.replace('default.properties', 'local.properties')
            }
        }
        getBuildProperties(build)
    }
}
